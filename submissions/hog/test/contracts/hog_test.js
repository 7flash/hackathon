// Generated by Haxe 3.4.0
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HogTest = function() { };
HogTest.__name__ = true;
HogTest.main = function() {
	jstack_js_JStack.onReady(function() {
		var args = process.argv.slice(2);
		if(args.length <= 0) {
			process.stdout.write("please specify the scenario file to run");
			process.stdout.write("\n");
			process.exit(1);
		}
		var scenario = haxe_Cson.parse(js_node_Fs.readFileSync(args[0],{ encoding : "utf8"}));
		var scenarioRunner = new ScenarioRunner(scenario);
		scenarioRunner.run(function(err) {
			if(err != null) {
				haxe_Log.trace(err,{ fileName : "HogTest.hx", lineNumber : 22, className : "HogTest", methodName : "main"});
			}
		});
	});
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function() { };
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = true;
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var ScenarioRunner = function(scenario) {
	this.time = 0;
	this.stepIndex = -1;
	this.isShadowAccount = false;
	this.currentAccountIndex = 0;
	this.shadowAccounts = new haxe_ds_IntMap();
	this.scenario = scenario;
	this.stepData = new haxe_ds_StringMap();
	this.previousPerAccount = new haxe_ds_IntMap();
	var counter = 0;
	var initialBalances = [];
	var _g = 0;
	var _g1 = scenario.initalBalances;
	while(_g < _g1.length) {
		var balance = _g1[_g];
		++_g;
		initialBalances.push({ balance : balance, index : counter});
		++counter;
	}
	web3_Web3Lib.setup();
	this.web3 = new Web3();
	this.web3.setProvider(ethereumjs_TestRpc.provider({ logger : console, accounts : initialBalances, seed : "testing"}));
};
ScenarioRunner.__name__ = true;
ScenarioRunner.prototype = {
	deployContract: function(next) {
		var _gthis = this;
		process.stdout.write("account " + this.currentAccountIndex + " deploying Contract");
		process.stdout.write("\n");
		web3_contract_Hog.deploy(this.web3,{ from : this.step.account, gas : this.step.gas},function(err,result) {
			_gthis.assertStepDoNotFail(_gthis.step,err,"deploy");
		},function(err1,contract) {
			_gthis.assertStepDoNotFail(_gthis.step,err1,"deploy");
			_gthis.deployedContract = contract;
			process.stdout.write("contract deployed");
			process.stdout.write("\n");
			next();
		});
	}
	,createGame: function(next) {
		var _gthis = this;
		var tmp = this.deployedContract;
		var tmp1 = this.step.params;
		var tmp2 = this.step.account;
		var tmp3 = this.step.gas;
		var this1 = new BigNumber(new BigNumber(this.step.value));
		tmp.commit_to_create_game(tmp1,{ from : tmp2, gas : tmp3, value : this1},function(err,txhash) {
			if(err != null) {
				process.stdout.write("player " + _gthis.currentAccountIndex + " cannot create game with");
				process.stdout.write("\n");
				var v = JSON.stringify(_gthis.step.params);
				process.stdout.write(v);
				process.stdout.write("\n");
				_gthis.assertStepDoNotFail(_gthis.step,err,"create_game");
			} else {
				process.stdout.write("txhash : " + txhash);
				process.stdout.write("\n");
			}
		},function(err1,txHash,t) {
			_gthis.deployedContract.probe_getGame({ slot : _gthis.getSlot(_gthis.step.account,_gthis.step.params.slotIndex)},{ },function(e,secondResult) {
				haxe_Log.trace(secondResult,{ fileName : "ScenarioRunner.hx", lineNumber : 59, className : "ScenarioRunner", methodName : "createGame"});
				haxe_Log.trace("0x" + secondResult.gameSlot.toString(16),{ fileName : "ScenarioRunner.hx", lineNumber : 60, className : "ScenarioRunner", methodName : "createGame"});
				if(err1 == null && secondResult.lastTime.toNumber() < _gthis.currentStepTime) {
					err1 = "lastTime (" + secondResult.lastTime.toString(10) + ")  smaller than currentStepTime(" + _gthis.currentStepTime + ")";
				}
				_gthis.assertStepDoNotFail(_gthis.step,err1,"create_game");
				next();
			});
		});
	}
	,createGameInvite: function(next) {
		next();
	}
	,startGame: function(next) {
		var _gthis = this;
		var tmp = this.deployedContract;
		var tmp1 = this.step.params;
		var tmp2 = this.step.account;
		var tmp3 = this.step.gas;
		var this1 = new BigNumber(new BigNumber(this.step.value));
		tmp.commit_to_start_game(tmp1,{ from : tmp2, gas : tmp3, value : this1},function(err,txhash) {
			if(err != null) {
				process.stdout.write("player " + _gthis.currentAccountIndex + " cannot start game with");
				process.stdout.write("\n");
				var v = JSON.stringify(_gthis.step.params);
				process.stdout.write(v);
				process.stdout.write("\n");
				_gthis.assertStepDoNotFail(_gthis.step,err,"start_game");
			} else {
				process.stdout.write("txhash : " + txhash);
				process.stdout.write("\n");
			}
		},function(err1,txHash,t) {
			_gthis.deployedContract.probe_getGame({ slot : _gthis.step.params.otherSlot},{ },function(e,secondResult) {
				haxe_Log.trace(secondResult,{ fileName : "ScenarioRunner.hx", lineNumber : 98, className : "ScenarioRunner", methodName : "startGame"});
				haxe_Log.trace("0x" + secondResult.gameSlot.toString(16),{ fileName : "ScenarioRunner.hx", lineNumber : 99, className : "ScenarioRunner", methodName : "startGame"});
				if(err1 == null && secondResult.lastTime.toNumber() < _gthis.currentStepTime) {
					err1 = "lastTime (" + secondResult.lastTime.toString(10) + ")  smaller than currentStepTime(" + _gthis.currentStepTime + ")";
				}
				_gthis.assertStepDoNotFail(_gthis.step,err1,"start_game");
				next();
			});
		});
	}
	,move: function(next) {
		var _gthis = this;
		var options = this.step.account;
		var options1 = this.step.gas;
		var this1 = new BigNumber(new BigNumber(this.step.value));
		var options2 = { from : options, gas : options1, value : this1};
		if(this.isShadowAccount) {
			options2.privateKey = this.shadowAccounts.h[this.currentAccountIndex].privateKeyInfo.privateKey;
		}
		this.deployedContract.commit_to_move(this.step.params,options2,function(err,txhash) {
			if(err != null) {
				process.stdout.write("player " + _gthis.currentAccountIndex + " cannot move with");
				process.stdout.write("\n");
				var v = JSON.stringify(_gthis.step.params);
				process.stdout.write(v);
				process.stdout.write("\n");
				_gthis.assertStepDoNotFail(_gthis.step,err,"move");
			} else {
				process.stdout.write("txhash : " + txhash);
				process.stdout.write("\n");
			}
		},function(err1,txHash,t) {
			_gthis.deployedContract.probe_getGame({ slot : _gthis.step.params.slot},{ },function(e,secondResult) {
				haxe_Log.trace(secondResult,{ fileName : "ScenarioRunner.hx", lineNumber : 138, className : "ScenarioRunner", methodName : "move"});
				haxe_Log.trace("0x" + secondResult.gameSlot.toString(16),{ fileName : "ScenarioRunner.hx", lineNumber : 139, className : "ScenarioRunner", methodName : "move"});
				var hashFound = secondResult.hash;
				if(err1 == null && hashFound != _gthis.step.params.hash) {
					err1 = "hash found (" + hashFound + ")  different than provided(" + Std.string(_gthis.step.params.hash) + ")";
				}
				_gthis.assertStepDoNotFail(_gthis.step,err1,"move");
				next();
			});
		});
	}
	,moveReveal: function(next) {
		var _gthis = this;
		var options = this.step.account;
		var options1 = this.step.gas;
		var this1 = new BigNumber(new BigNumber(this.step.value));
		var options2 = { from : options, gas : options1, value : this1};
		if(this.isShadowAccount) {
			options2.privateKey = this.shadowAccounts.h[this.currentAccountIndex].privateKeyInfo.privateKey;
		}
		this.deployedContract.commit_to_move_reveal(this.step.params,options2,function(err,txhash) {
			if(err != null) {
				process.stdout.write("player " + _gthis.currentAccountIndex + " cannot move_reveal with");
				process.stdout.write("\n");
				var v = JSON.stringify(_gthis.step.params);
				process.stdout.write(v);
				process.stdout.write("\n");
				_gthis.assertStepDoNotFail(_gthis.step,err,"move_reveal");
			} else {
				process.stdout.write("txhash : " + txhash);
				process.stdout.write("\n");
			}
		},function(err1,txHash,t) {
			_gthis.deployedContract.probe_getGame({ slot : _gthis.step.params.slot},{ },function(e,secondResult) {
				haxe_Log.trace(secondResult,{ fileName : "ScenarioRunner.hx", lineNumber : 180, className : "ScenarioRunner", methodName : "moveReveal"});
				haxe_Log.trace("0x" + secondResult.gameSlot.toString(16),{ fileName : "ScenarioRunner.hx", lineNumber : 181, className : "ScenarioRunner", methodName : "moveReveal"});
				if(err1 == null && secondResult.lastTime.toNumber() < _gthis.currentStepTime) {
					err1 = "lastTime (" + secondResult.lastTime.toString(10) + ")  smaller than currentStepTime(" + _gthis.currentStepTime + ")";
				}
				_gthis.assertStepDoNotFail(_gthis.step,err1,"move_reveal");
				next();
			});
		});
	}
	,revealMove: function(next) {
		var _gthis = this;
		var options = this.step.account;
		var options1 = this.step.gas;
		var this1 = new BigNumber(new BigNumber(this.step.value));
		var options2 = { from : options, gas : options1, value : this1};
		if(this.isShadowAccount) {
			options2.privateKey = this.shadowAccounts.h[this.currentAccountIndex].privateKeyInfo.privateKey;
		}
		this.deployedContract.commit_to_reveal_move(this.step.params,options2,function(err,txhash) {
			if(err != null) {
				process.stdout.write("player " + _gthis.currentAccountIndex + " cannot reveal_move with");
				process.stdout.write("\n");
				var v = JSON.stringify(_gthis.step.params);
				process.stdout.write(v);
				process.stdout.write("\n");
				_gthis.assertStepDoNotFail(_gthis.step,err,"reveal_move");
			} else {
				process.stdout.write("txhash : " + txhash);
				process.stdout.write("\n");
			}
		},function(err1,txHash,t) {
			_gthis.deployedContract.probe_getGame({ slot : _gthis.step.params.slot},{ },function(e,secondResult) {
				haxe_Log.trace(secondResult,{ fileName : "ScenarioRunner.hx", lineNumber : 219, className : "ScenarioRunner", methodName : "revealMove"});
				haxe_Log.trace("0x" + secondResult.gameSlot.toString(16),{ fileName : "ScenarioRunner.hx", lineNumber : 220, className : "ScenarioRunner", methodName : "revealMove"});
				if(err1 == null && secondResult.lastTime.toNumber() < _gthis.currentStepTime) {
					err1 = "lastTime (" + secondResult.lastTime.toString(10) + ")  smaller than currentStepTime(" + _gthis.currentStepTime + ")";
				}
				_gthis.assertStepDoNotFail(_gthis.step,err1,"reveal_move");
				next();
			});
		});
	}
	,_next: function() {
		this.wait(1);
		this.stepIndex++;
		if(this.scenario.steps.length > this.stepIndex) {
			this.step = this.scenario.steps[this.stepIndex];
			var parsedAccount = Std.parseInt(this.step.account);
			if(parsedAccount == null) {
				var split = (js_Boot.__cast(this.step.account , String)).split(":");
				var special = split[0];
				if(special == "_shadowAddress") {
					var accountIndex = Std.parseInt(split[1]);
					if(!this.shadowAccounts.h.hasOwnProperty(accountIndex)) {
						var pvInfo = ethereumjs_Keythereum.create();
						var this1 = this.shadowAccounts;
						var v = { address : ethereumjs_Keythereum.privateKeyToAddress(pvInfo.privateKey), privateKeyInfo : pvInfo};
						this1.h[accountIndex] = v;
					}
					var this2 = this.shadowAccounts.h[accountIndex].address;
					this.step.account = this2;
					this.currentAccountIndex = accountIndex;
					this.isShadowAccount = true;
				} else {
					this.step.account = this.transformParam(this.step.account);
					this.currentAccountIndex = -1;
					this.isShadowAccount = false;
				}
			} else {
				this.step.account = this.accounts[parsedAccount];
				this.currentAccountIndex = parsedAccount;
				this.isShadowAccount = false;
			}
			this.currentStepTime = Date.prototype.getTime() / 1000;
			if(this.step.value == null) {
				this.step.value = "0";
			}
			if(this.step.gas == null) {
				this.step.gas = 3000000;
			}
			this.injectParams(this.step.params);
			var _g = this.step.action;
			switch(_g) {
			case "_deploy_":
				this.wrapBalanceCheck($bind(this,this.deployContract));
				break;
			case "_wait_":
				process.stdout.write("waiting " + Std.string(this.step.params.seconds) + " seconds ...");
				process.stdout.write("\n");
				this.wait(this.step.params.seconds);
				this._next();
				break;
			case "create_game":
				this.wrapBalanceCheck($bind(this,this.createGame));
				break;
			case "create_game_invite":
				this.wrapBalanceCheck($bind(this,this.createGameInvite));
				break;
			case "move":
				this.wrapBalanceCheck($bind(this,this.move));
				break;
			case "move_reveal":
				this.wrapBalanceCheck($bind(this,this.moveReveal));
				break;
			case "reveal_move":
				this.wrapBalanceCheck($bind(this,this.revealMove));
				break;
			case "start_game":
				this.wrapBalanceCheck($bind(this,this.startGame));
				break;
			default:
				this.skip(this.step);
			}
		} else {
			this.end();
		}
	}
	,getSlot: function(address,index) {
		var slot = address;
		if(_$UInt_UInt_$Impl_$.gt(index,0)) {
			slot = "0x" + StringTools.hex(index) + HxOverrides.substr(slot,2,null);
		}
		return slot;
	}
	,transformParam: function(str) {
		var split = str.split(":");
		var special = split[0];
		if(special == "_shadowAddress") {
			var accountIndex = Std.parseInt(split[1]);
			if(!this.shadowAccounts.h.hasOwnProperty(accountIndex)) {
				var pvInfo = ethereumjs_Keythereum.create();
				var this1 = this.shadowAccounts;
				var v = { address : ethereumjs_Keythereum.privateKeyToAddress(pvInfo.privateKey), privateKeyInfo : pvInfo};
				this1.h[accountIndex] = v;
			}
			return this.shadowAccounts.h[accountIndex].address;
		} else if(special == "_account") {
			return this.accounts[Std.parseInt(split[1])];
		} else if(special == "_leftPadAccount") {
			var s = this.accounts[Std.parseInt(split[1])];
			s = HxOverrides.substr(s,2,null);
			while(s.length < 64) s = "0" + s;
			haxe_Log.trace("leftPadAccount ",{ fileName : "ScenarioRunner.hx", lineNumber : 359, className : "ScenarioRunner", methodName : "transformParam", customParams : [s]});
			return "0x" + s;
		} else if(special == "_slot") {
			return this.getSlot(this.accounts[Std.parseInt(split[1])],Std.parseInt(split[2]));
		} else if(special == "_sha3") {
			var elems = [];
			var _g1 = 1;
			var _g = split.length;
			while(_g1 < _g) {
				var i = _g1++;
				var elem = split[i];
				elems.push(this.transformParam(StringTools.replace(elem,"|",":")));
			}
			web3_Web3Lib.setup();
			var str1 = "";
			var _g2 = 0;
			while(_g2 < elems.length) {
				var elem1 = elems[_g2];
				++_g2;
				if(StringTools.startsWith(elem1,"0x")) {
					str1 += HxOverrides.substr(elem1,2,null);
				} else {
					str1 += web3_Web3Lib._web3.toHex(elem1).substr(2);
				}
			}
			var val = web3_Web3Lib._web3.sha3(str1,{ encoding : "hex"});
			haxe_Log.trace("sha3 : ",{ fileName : "ScenarioRunner.hx", lineNumber : 372, className : "ScenarioRunner", methodName : "transformParam", customParams : [val]});
			return val;
		} else {
			return str;
		}
	}
	,injectParams: function(params) {
		var fields = Reflect.fields(params);
		var _g = 0;
		while(_g < fields.length) {
			var fieldName = fields[_g];
			++_g;
			var value = Reflect.field(params,fieldName);
			if(typeof(value) == "string") {
				var strValue = value;
				if(strValue.charAt(0) == "_") {
					params[fieldName] = this.transformParam(strValue);
				}
			}
		}
	}
	,run: function(callback) {
		var _gthis = this;
		this._callback = callback;
		this.time = 1000;
		ethereumjs_Util.setTime(this.time);
		this.web3.eth.getAccounts(function(err,accs) {
			_gthis.accounts = accs;
			_gthis.balancesAfter = [];
			_gthis.balancesBefore = [];
			var _g1 = 0;
			var _g = _gthis.accounts.length;
			while(_g1 < _g) {
				var i = _g1++;
				var _gthis1 = _gthis.balancesBefore;
				var this1 = new BigNumber(new BigNumber(0));
				var this2 = this1;
				_gthis1.push(this2);
				var _gthis2 = _gthis.balancesAfter;
				var this3 = new BigNumber(new BigNumber(0));
				var this4 = this3;
				_gthis2.push(this4);
			}
			haxe_Log.trace(JSON.stringify(_gthis.accounts),{ fileName : "ScenarioRunner.hx", lineNumber : 405, className : "ScenarioRunner", methodName : "run"});
			_gthis._next();
		});
	}
	,saveBalance: function(balanceArray,i,callback) {
		this.web3.eth.getBalance(this.accounts[i],function(err,balance) {
			balanceArray[i] = balance;
			callback();
		});
	}
	,saveBalances: function(balanceArray,callback) {
		var counter = this.accounts.length;
		var _g1 = 0;
		var _g = this.accounts.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.saveBalance(balanceArray,i,function() {
				counter -= 1;
				if(counter <= 0) {
					callback();
				}
			});
		}
	}
	,wrapBalanceCheck: function(func) {
		var _gthis = this;
		this.saveBalances(this.balancesBefore,function() {
			func(function() {
				_gthis.saveBalances(_gthis.balancesAfter,function() {
					process.stdout.write("checking deltas ...");
					process.stdout.write("\n");
					var balanceErrors = [];
					var _g1 = 0;
					var _g = _gthis.balancesAfter.length;
					while(_g1 < _g) {
						var i = _g1++;
						var actualDelta = _gthis.balancesAfter[i].minus(_gthis.balancesBefore[i]);
						if(!actualDelta.equals(0)) {
							var v = "account " + i + " balance delta : " + actualDelta.toString(10);
							process.stdout.write(v);
							process.stdout.write("\n");
						}
						if(_gthis.step.expectedDeltas != null) {
							var expectationTest = "=";
							var expectationParam = 0;
							var this1 = new BigNumber(new BigNumber(0));
							var expectedDelta = this1;
							if(_gthis.step.expectedDeltas.length > i) {
								if(_gthis.step.expectedDeltas[i] == "*") {
									continue;
								}
								var expextedDeltaString = _gthis.step.expectedDeltas[i];
								var split = expextedDeltaString.split(":");
								var this2 = new BigNumber(split[0]);
								expectedDelta = this2;
								if(split.length > 1) {
									expectationTest = split[1].charAt(0);
									if(split[1].length > 1) {
										expectationParam = Std.parseInt(HxOverrides.substr(split[1],1,null));
									}
								}
							}
							var actualDelta1 = _gthis.balancesAfter[i].minus(_gthis.balancesBefore[i]);
							var match;
							switch(expectationTest) {
							case "*":
								match = true;
								break;
							case "=":
								var this3 = expectedDelta;
								match = actualDelta1.equals(this3);
								break;
							case "~":
								var this4 = new BigNumber(expectationParam / 2.0);
								var small = expectedDelta.minus(this4);
								var this5 = new BigNumber(expectationParam / 2.0);
								var big = expectedDelta.plus(this5);
								if(actualDelta1.gt(small)) {
									match = actualDelta1.lt(big);
								} else {
									match = false;
								}
								break;
							}
							if(!match) {
								balanceErrors.push("no matching balance delta " + Std.string(expectedDelta) + " vs actual " + Std.string(actualDelta1) + " for account " + i);
							}
						}
					}
					if(balanceErrors.length > 0) {
						var _g2 = 0;
						while(_g2 < balanceErrors.length) {
							var err = balanceErrors[_g2];
							++_g2;
							process.stdout.write(err);
							process.stdout.write("\n");
							_gthis.abort("balance mismatch");
						}
					}
					process.stdout.write("done");
					process.stdout.write("\n");
					_gthis._next();
				});
			});
		});
	}
	,assertStepDoNotFail: function(step,err,message) {
		if(step.shouldFail && err == null) {
			this.abort("should have failed but it did not : " + message);
		} else if(!step.shouldFail && err != null) {
			this.abort("failed : " + message + ", error: " + Std.string(err));
		}
	}
	,wait: function(seconds) {
		this.time += seconds;
		ethereumjs_Util.setTime(this.time);
	}
	,skip: function(step) {
		process.stdout.write("skipping " + Std.string(step));
		process.stdout.write("\n");
		this._next();
	}
	,abort: function(message) {
		process.stdout.write("error : " + message);
		process.stdout.write("\n");
		process.stdout.write("" + this.stepIndex);
		process.stdout.write("\n");
		process.stdout.write("" + Std.string(this.step));
		process.stdout.write("\n");
		process.exit(1);
	}
	,end: function() {
		process.exit(0);
	}
	,__class__: ScenarioRunner
};
var SourceMap = function(sourceMapData) {
	this.mappings = [];
	this.sourceRoot = "";
	this.version = 3;
	this.parse(sourceMapData);
};
SourceMap.__name__ = true;
SourceMap.prototype = {
	originalPositionFor: function(line,column) {
		if(column == null) {
			column = 0;
		}
		if(line < 1 || line > this.mappings.length) {
			return null;
		}
		var pos = null;
		var _g = 0;
		var _g1 = this.mappings[line - 1];
		while(_g < _g1.length) {
			var mapping = _g1[_g];
			++_g;
			if(mapping[0] <= column) {
				var pos1 = { generatedLine : line, generatedColumn : mapping[0]};
				if(mapping.length > 1) {
					pos1.originalLine = mapping[2] + 1;
					pos1.originalColumn = mapping[3];
					pos1.source = this.sourceRoot + this.sources[mapping[1]];
					if(mapping.length > 4) {
						pos1.name = this.names[mapping[4]];
					}
				}
				pos = pos1;
				break;
			}
		}
		return pos;
	}
	,eachMapping: function(callback) {
		var _g1 = 0;
		var _g = this.mappings.length;
		while(_g1 < _g) {
			var line = _g1++;
			var _g2 = 0;
			var _g3 = this.mappings[line];
			while(_g2 < _g3.length) {
				var mapping = _g3[_g2];
				++_g2;
				var pos = { generatedLine : line + 1, generatedColumn : mapping[0]};
				if(mapping.length > 1) {
					pos.originalLine = mapping[2] + 1;
					pos.originalColumn = mapping[3];
					pos.source = this.sourceRoot + this.sources[mapping[1]];
					if(mapping.length > 4) {
						pos.name = this.names[mapping[4]];
					}
				}
				callback(pos);
			}
		}
	}
	,parse: function(json) {
		var data = JSON.parse(json);
		if(data == null) {
			throw new js__$Boot_HaxeError("Failed to parse source map data.");
		}
		this.version = data.version;
		this.file = data.file;
		this.sourceRoot = data.sourceRoot == null ? "" : data.sourceRoot;
		this.sources = data.sources;
		this.sourcesContent = data.sourcesContent == null ? [] : data.sourcesContent;
		this.names = data.names;
		var encoded = data.mappings.split(";");
		this.mappings[encoded.length - 1] = null;
		var previousSource = 0;
		var previousLine = 0;
		var previousColumn = 0;
		var previousName = 0;
		var _g1 = 0;
		var _g = encoded.length;
		while(_g1 < _g) {
			var l = _g1++;
			this.mappings[l] = [];
			if(encoded[l].length == 0) {
				continue;
			}
			var previousGeneratedColumn = 0;
			var segments = encoded[l].split(",");
			this.mappings[l][segments.length - 1] = null;
			var _g3 = 0;
			var _g2 = segments.length;
			while(_g3 < _g2) {
				var s = _g3++;
				var vlq = segments[s];
				var data1 = [0,0,0,0];
				var index = -1;
				var _g11 = 0;
				var _g4 = data1.length;
				while(_g11 < _g4) {
					var i = _g11++;
					var value = 0;
					var shift = 0;
					var digit;
					var masked;
					while(true) {
						var charCode = vlq.charCodeAt(++index);
						if(97 <= charCode) {
							digit = charCode - 97 + 26;
						} else if(65 <= charCode) {
							digit = charCode - 65;
						} else if(48 <= charCode) {
							digit = charCode - 48 + 52;
						} else if(charCode == 43) {
							digit = 62;
						} else {
							digit = 63;
						}
						masked = digit & 31;
						value += masked << shift;
						shift += 5;
						if(!(digit != masked)) {
							break;
						}
					}
					data1[i] = (value & 1) == 1 ? -(value >> 1) : value >> 1;
				}
				var this1 = data1;
				var mapping = this1;
				this.mappings[l][s] = mapping;
				mapping[0] += previousGeneratedColumn;
				if(mapping.length > 1) {
					mapping[1] += previousSource;
					mapping[2] += previousLine;
					mapping[3] += previousColumn;
					if(mapping.length > 4) {
						mapping[4] += previousName;
						previousName = mapping[4];
					}
					previousLine = mapping[2];
					previousSource = mapping[1];
					previousColumn = mapping[3];
				}
				previousGeneratedColumn = mapping[0];
			}
		}
	}
	,__class__: SourceMap
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var _$UInt_UInt_$Impl_$ = {};
_$UInt_UInt_$Impl_$.__name__ = true;
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
var BigNumber = require("bignumber.js");
var bignumberjs__$BigNumber_BigNumber_$Impl_$ = {};
bignumberjs__$BigNumber_BigNumber_$Impl_$.__name__ = true;
bignumberjs__$BigNumber_BigNumber_$Impl_$._new = function(value) {
	var this1 = new BigNumber(value);
	return this1;
};
bignumberjs__$BigNumber_BigNumber_$Impl_$.fromInt = function(value) {
	var this1 = new BigNumber(new BigNumber(value));
	return this1;
};
bignumberjs__$BigNumber_BigNumber_$Impl_$.fromFloat = function(value) {
	var this1 = new BigNumber(new BigNumber(value));
	return this1;
};
bignumberjs__$BigNumber_BigNumber_$Impl_$.fromString = function(value) {
	var this1 = new BigNumber(new BigNumber(value));
	return this1;
};
bignumberjs__$BigNumber_BigNumber_$Impl_$.random = function() {
	return BigNumber.random();
};
var ethereumjs_Keythereum = require("keythereum");
var ethereumjs_TestRpc = require("ethereumjs-testrpc");
var ethereumjs_Tx = require("ethereumjs-tx");
var ethereumjs_Util = function() { };
ethereumjs_Util.__name__ = true;
ethereumjs_Util.evm_snapshot = function(_web3,cb) {
	_web3.currentProvider.sendAsync({ jsonrpc : "2.0", method : "evm_snapshot", id : 12345},function(err,result) {
		if(err) {
			cb(err,null);
		} else {
			cb(null,result.result);
		}
	});
};
ethereumjs_Util.evm_revert = function(_web3,snapshotId,cb) {
	_web3.currentProvider.sendAsync({ jsonrpc : "2.0", method : "evm_revert", params : [snapshotId], id : 12346},cb);
};
ethereumjs_Util.setTime = function(timeInSec) {
	if(ethereumjs_Util.oldGetTime == null) {
		ethereumjs_Util.oldGetTime = Date.prototype.getTime;
	}
	Date.prototype.getTime = function() {
		return timeInSec * 1000;
	};
};
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = true;
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Cson = function() { };
haxe_Cson.__name__ = true;
haxe_Cson.isName = function($char) {
	if(StringTools.isSpace($char,0)) {
		return false;
	} else {
		switch($char) {
		case "\"":case "#":case "'":case ",":case ":":case "=":case "[":case "]":case "{":case "}":
			return false;
		default:
			return true;
		}
	}
};
haxe_Cson.isWS = function($char) {
	return StringTools.isSpace($char,0);
};
haxe_Cson.isCRLF = function($char,nextChar) {
	if($char == "\r") {
		return nextChar == "\n";
	} else {
		return false;
	}
};
haxe_Cson.isNameSeparator = function($char) {
	if($char != ":") {
		return $char == "=";
	} else {
		return true;
	}
};
haxe_Cson.isEndOfDQuote = function(prevChar,$char) {
	if(prevChar != "\\") {
		return $char == "\"";
	} else {
		return false;
	}
};
haxe_Cson.isEndOfSQuote = function(prevChar,$char) {
	if(prevChar != "\\") {
		return $char == "'";
	} else {
		return false;
	}
};
haxe_Cson.isQuote = function($char) {
	if($char != "\"") {
		return $char == "'";
	} else {
		return true;
	}
};
haxe_Cson.isBeginOfBracket = function($char) {
	if($char != "[") {
		return $char == "{";
	} else {
		return true;
	}
};
haxe_Cson.isEndOfBracket = function($char) {
	if($char != "]") {
		return $char == "}";
	} else {
		return true;
	}
};
haxe_Cson.isBracket = function($char) {
	if(!($char == "[" || $char == "{")) {
		if($char != "]") {
			return $char == "}";
		} else {
			return true;
		}
	} else {
		return true;
	}
};
haxe_Cson.stringToLiteral = function(string) {
	return StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(string,"\\","\\\\"),"\x08","\\b"),"\x0C","\\f"),"\n","\\n"),"\r","\\r"),"\t","\\t"),"\"","\\\"");
};
haxe_Cson.charAt = function(text,index) {
	if(text == null || 0 > index || index >= text.length) {
		return "";
	} else {
		var code = HxOverrides.cca(text,index);
		if(code == null) {
			return "";
		} else {
			return String.fromCharCode(code);
		}
	}
};
haxe_Cson.tokenize = function(text) {
	var tokens = [];
	var prevChar;
	var currentChar;
	var nextChar;
	var i = -1;
	var length = text.length;
	while(++i < length) {
		if(text == null || 0 > i || i >= text.length) {
			currentChar = "";
		} else {
			var code = HxOverrides.cca(text,i);
			if(code == null) {
				currentChar = "";
			} else {
				currentChar = String.fromCharCode(code);
			}
		}
		var index = i - 1;
		if(text == null || 0 > index || index >= text.length) {
			prevChar = "";
		} else {
			var code1 = HxOverrides.cca(text,index);
			if(code1 == null) {
				prevChar = "";
			} else {
				prevChar = String.fromCharCode(code1);
			}
		}
		var index1 = i + 1;
		if(text == null || 0 > index1 || index1 >= text.length) {
			nextChar = "";
		} else {
			var code2 = HxOverrides.cca(text,index1);
			if(code2 == null) {
				nextChar = "";
			} else {
				nextChar = String.fromCharCode(code2);
			}
		}
		if(currentChar == "[" || currentChar == "{" || (currentChar == "]" || currentChar == "}")) {
			tokens.push(currentChar);
		} else if(StringTools.isSpace(currentChar,0) || currentChar == ",") {
			continue;
		} else if(currentChar == "\r" && nextChar == "\n") {
			++i;
		} else if(currentChar == ":" || currentChar == "=") {
			tokens.push(":");
		} else if(currentChar == "\"" || currentChar == "'") {
			var escapeCount = 0;
			var isSQuote = currentChar == "'";
			var from = i;
			var index2 = ++i;
			if(text == null || 0 > index2 || index2 >= text.length) {
				currentChar = "";
			} else {
				var code3 = HxOverrides.cca(text,index2);
				if(code3 == null) {
					currentChar = "";
				} else {
					currentChar = String.fromCharCode(code3);
				}
			}
			var index3 = i - 1;
			if(text == null || 0 > index3 || index3 >= text.length) {
				prevChar = "";
			} else {
				var code4 = HxOverrides.cca(text,index3);
				if(code4 == null) {
					prevChar = "";
				} else {
					prevChar = String.fromCharCode(code4);
				}
			}
			if(isSQuote) {
				var buffer_b = "";
				while(!(prevChar != "\\" && currentChar == "'") && i < length) {
					if(currentChar == "\"" && escapeCount % 2 == 0) {
						buffer_b += "\\";
					}
					buffer_b += currentChar == null ? "null" : "" + currentChar;
					if(currentChar == "\\") {
						++escapeCount;
					} else {
						escapeCount = 0;
					}
					var index4 = ++i;
					if(text == null || 0 > index4 || index4 >= text.length) {
						currentChar = "";
					} else {
						var code5 = HxOverrides.cca(text,index4);
						if(code5 == null) {
							currentChar = "";
						} else {
							currentChar = String.fromCharCode(code5);
						}
					}
					var index5 = i - 1;
					if(text == null || 0 > index5 || index5 >= text.length) {
						prevChar = "";
					} else {
						var code6 = HxOverrides.cca(text,index5);
						if(code6 == null) {
							prevChar = "";
						} else {
							prevChar = String.fromCharCode(code6);
						}
					}
				}
				tokens.push("\"" + buffer_b + "\"");
			} else {
				while(!(prevChar != "\\" && currentChar == "\"") && i < length) {
					var index6 = ++i;
					if(text == null || 0 > index6 || index6 >= text.length) {
						currentChar = "";
					} else {
						var code7 = HxOverrides.cca(text,index6);
						if(code7 == null) {
							currentChar = "";
						} else {
							currentChar = String.fromCharCode(code7);
						}
					}
					var index7 = i - 1;
					if(text == null || 0 > index7 || index7 >= text.length) {
						prevChar = "";
					} else {
						var code8 = HxOverrides.cca(text,index7);
						if(code8 == null) {
							prevChar = "";
						} else {
							prevChar = String.fromCharCode(code8);
						}
					}
				}
				tokens.push(HxOverrides.substr(text,from,i - from + 1));
			}
		} else if(currentChar == "|") {
			var buffer = [];
			var exit;
			var from1;
			exit = false;
			from1 = i + 1;
			while(i < length) {
				var index8 = ++i;
				if(text == null || 0 > index8 || index8 >= text.length) {
					currentChar = "";
				} else {
					var code9 = HxOverrides.cca(text,index8);
					if(code9 == null) {
						currentChar = "";
					} else {
						currentChar = String.fromCharCode(code9);
					}
				}
				var index9 = i + 1;
				if(text == null || 0 > index9 || index9 >= text.length) {
					nextChar = "";
				} else {
					var code10 = HxOverrides.cca(text,index9);
					if(code10 == null) {
						nextChar = "";
					} else {
						nextChar = String.fromCharCode(code10);
					}
				}
				if(exit) {
					if(currentChar == "|") {
						exit = false;
						from1 = i + 1;
						continue;
					} else if(currentChar == "\r" && nextChar == "\n") {
						++i;
						break;
					} else if(currentChar == "\n") {
						break;
					} else if(!StringTools.isSpace(currentChar,0)) {
						--i;
						break;
					}
				} else if(currentChar == "\r" && nextChar == "\n") {
					buffer.push(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(HxOverrides.substr(text,from1,i - from1),"\\","\\\\"),"\x08","\\b"),"\x0C","\\f"),"\n","\\n"),"\r","\\r"),"\t","\\t"),"\"","\\\""));
					exit = true;
					++i;
				} else if(currentChar == "\n") {
					buffer.push(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(HxOverrides.substr(text,from1,i - from1),"\\","\\\\"),"\x08","\\b"),"\x0C","\\f"),"\n","\\n"),"\r","\\r"),"\t","\\t"),"\"","\\\""));
					exit = true;
				}
			}
			if(!exit) {
				buffer.push(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(HxOverrides.substr(text,from1,i - from1),"\\","\\\\"),"\x08","\\b"),"\x0C","\\f"),"\n","\\n"),"\r","\\r"),"\t","\\t"),"\"","\\\""));
				exit = true;
			}
			tokens.push("\"" + buffer.join("\\n") + "\"");
		} else if(currentChar == "#") {
			while(i < text.length) {
				var index10 = ++i;
				if(text == null || 0 > index10 || index10 >= text.length) {
					currentChar = "";
				} else {
					var code11 = HxOverrides.cca(text,index10);
					if(code11 == null) {
						currentChar = "";
					} else {
						currentChar = String.fromCharCode(code11);
					}
				}
				var index11 = i + 1;
				if(text == null || 0 > index11 || index11 >= text.length) {
					nextChar = "";
				} else {
					var code12 = HxOverrides.cca(text,index11);
					if(code12 == null) {
						nextChar = "";
					} else {
						nextChar = String.fromCharCode(code12);
					}
				}
				if(currentChar == "\n") {
					break;
				} else if(currentChar == "\r" && nextChar == "\n") {
					++i;
					break;
				}
			}
		} else {
			var tmp;
			if(StringTools.isSpace(nextChar,0)) {
				tmp = false;
			} else {
				switch(nextChar) {
				case "\"":case "#":case "'":case ",":case ":":case "=":case "[":case "]":case "{":case "}":
					tmp = false;
					break;
				default:
					tmp = true;
				}
			}
			if(!tmp) {
				tokens.push(currentChar);
				continue;
			}
			var from2 = i;
			while(i < text.length) {
				var index12 = ++i;
				if(text == null || 0 > index12 || index12 >= text.length) {
					currentChar = "";
				} else {
					var code13 = HxOverrides.cca(text,index12);
					if(code13 == null) {
						currentChar = "";
					} else {
						currentChar = String.fromCharCode(code13);
					}
				}
				var index13 = i + 1;
				if(text == null || 0 > index13 || index13 >= text.length) {
					nextChar = "";
				} else {
					var code14 = HxOverrides.cca(text,index13);
					if(code14 == null) {
						nextChar = "";
					} else {
						nextChar = String.fromCharCode(code14);
					}
				}
				var tmp1;
				if(StringTools.isSpace(nextChar,0)) {
					tmp1 = false;
				} else {
					switch(nextChar) {
					case "\"":case "#":case "'":case ",":case ":":case "=":case "[":case "]":case "{":case "}":
						tmp1 = false;
						break;
					default:
						tmp1 = true;
					}
				}
				if(!tmp1) {
					break;
				}
			}
			tokens.push(HxOverrides.substr(text,from2,i - from2 + 1));
		}
	}
	return tokens;
};
haxe_Cson.toJson = function(text,indent) {
	if(indent == null) {
		indent = 0;
	}
	var tokens = haxe_Cson.tokenize(text);
	var indentLevel = 0;
	var doIndent = indent == 0 ? false : true;
	var $char = tokens[0];
	if(!($char == "[" || $char == "{")) {
		var second = tokens[1];
		if(second != null) {
			if(second == ":") {
				tokens.unshift("{");
				tokens.push("}");
			} else {
				tokens.unshift("[");
				tokens.push("]");
			}
		}
	}
	var _g1 = 0;
	var _g = tokens.length;
	while(_g1 < _g) {
		var i = _g1++;
		var token = tokens[i];
		var first;
		if(token == null || 0 >= token.length) {
			first = "";
		} else {
			var code = HxOverrides.cca(token,0);
			if(code == null) {
				first = "";
			} else {
				first = String.fromCharCode(code);
			}
		}
		var nextToken = tokens[i + 1];
		var nextFirst;
		if(nextToken == null || 0 >= nextToken.length) {
			nextFirst = "";
		} else {
			var code1 = HxOverrides.cca(nextToken,0);
			if(code1 == null) {
				nextFirst = "";
			} else {
				nextFirst = String.fromCharCode(code1);
			}
		}
		if(doIndent) {
			if(token == ":") {
				tokens[i] += " ";
			}
			if(first == "[" || first == "{") {
				++indentLevel;
			}
			if(first == "]" || first == "}") {
				--indentLevel;
			}
		}
		var tmp;
		var tmp1;
		if(StringTools.isSpace(first,0)) {
			tmp1 = false;
		} else {
			switch(first) {
			case "\"":case "#":case "'":case ",":case ":":case "=":case "[":case "]":case "{":case "}":
				tmp1 = false;
				break;
			default:
				tmp1 = true;
			}
		}
		if(tmp1) {
			tmp = nextToken == ":";
		} else {
			tmp = false;
		}
		if(tmp) {
			tokens[i] = "\"" + token + "\"";
		}
		if(!(first == "[" || first == "{") && first != ":" && nextToken != null && (!(nextFirst == "]" || nextFirst == "}") && nextFirst != ":")) {
			tokens[i] += ",";
			if(doIndent) {
				var tokens1 = tokens;
				var i1 = i;
				var tokens2 = tokens1[i1];
				var indentCount = Math.max(indent * indentLevel + 1,0);
				var indentBuffer = "";
				var _g11 = 0;
				var _g2 = indentCount - 1;
				while(_g11 < _g2) {
					var i2 = _g11++;
					indentBuffer += " ";
				}
				tokens1[i1] = tokens2 + ("\n" + indentBuffer);
			}
		}
	}
	if(doIndent) {
		var _g12 = 0;
		var _g3 = tokens.length;
		while(_g12 < _g3) {
			var i3 = _g12++;
			var token1 = tokens[i3];
			var prevToken = tokens[i3 - 1];
			var nextToken1 = tokens[i3 + 1];
			var first1;
			if(token1 == null || 0 >= token1.length) {
				first1 = "";
			} else {
				var code2 = HxOverrides.cca(token1,0);
				if(code2 == null) {
					first1 = "";
				} else {
					first1 = String.fromCharCode(code2);
				}
			}
			if(first1 == "[" || first1 == "{") {
				++indentLevel;
				var tmp2;
				if(nextToken1 != "") {
					var char1;
					if(nextToken1 == null || 0 >= nextToken1.length) {
						char1 = "";
					} else {
						var code3 = HxOverrides.cca(nextToken1,0);
						if(code3 == null) {
							char1 = "";
						} else {
							char1 = String.fromCharCode(code3);
						}
					}
					tmp2 = !(char1 == "]" || char1 == "}");
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					var tokens3 = tokens;
					var i4 = i3;
					var tokens4 = tokens3[i4];
					var indentCount1 = Math.max(indent * indentLevel + 1,0);
					var indentBuffer1 = "";
					var _g13 = 0;
					var _g4 = indentCount1 - 1;
					while(_g13 < _g4) {
						var i5 = _g13++;
						indentBuffer1 += " ";
					}
					tokens3[i4] = tokens4 + ("\n" + indentBuffer1);
				}
			}
			if(first1 == "]" || first1 == "}") {
				--indentLevel;
				var tmp3;
				if(prevToken != "") {
					var char2;
					if(prevToken == null || 0 >= prevToken.length) {
						char2 = "";
					} else {
						var code4 = HxOverrides.cca(prevToken,0);
						if(code4 == null) {
							char2 = "";
						} else {
							char2 = String.fromCharCode(code4);
						}
					}
					tmp3 = !(char2 == "[" || char2 == "{");
				} else {
					tmp3 = false;
				}
				if(tmp3) {
					var indentCount2 = Math.max(indent * indentLevel + 1,0);
					var indentBuffer2 = "";
					var _g14 = 0;
					var _g5 = indentCount2 - 1;
					while(_g14 < _g5) {
						var i6 = _g14++;
						indentBuffer2 += " ";
					}
					tokens[i3] = "\n" + indentBuffer2 + token1;
				}
			}
		}
	}
	return tokens.join("");
};
haxe_Cson.parse = function(csonString) {
	return JSON.parse(haxe_Cson.toJson(csonString));
};
var haxe_Http = function(url) {
	this.url = url;
	this.headers = new List();
	this.params = new List();
};
haxe_Http.__name__ = true;
haxe_Http.prototype = {
	request: function(post) {
		var me = this;
		me.responseData = null;
		var parsedUrl = js_node_Url.parse(this.url);
		var secure = parsedUrl.protocol == "https:";
		var host = parsedUrl.hostname;
		var path = parsedUrl.path;
		var port = parsedUrl.port != null ? Std.parseInt(parsedUrl.port) : secure ? 443 : 80;
		var h = { };
		var _g_head = this.headers.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var i = val;
			var arr = Reflect.field(h,i.header);
			if(arr == null) {
				arr = [];
				h[i.header] = arr;
			}
			arr.push(i.value);
		}
		var uri = this.postData;
		if(uri != null) {
			post = true;
		} else {
			var _g_head1 = this.params.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var p = val1;
				if(uri == null) {
					uri = "";
				} else {
					uri += "&";
				}
				var s = p.param;
				var uri1 = encodeURIComponent(s) + "=";
				var s1 = p.value;
				uri += uri1 + encodeURIComponent(s1);
			}
		}
		var question = path.split("?").length <= 1;
		if(!post && uri != null) {
			path += (question ? "?" : "&") + uri;
		}
		var opts = { protocol : parsedUrl.protocol, hostname : host, port : port, method : post ? "POST" : "GET", path : path, headers : h};
		var httpResponse = function(res) {
			var s2 = res.statusCode;
			if(s2 != null) {
				me.onStatus(s2);
			}
			var body = "";
			res.on("data",function(d) {
				body += d;
			});
			res.on("end",function(_) {
				me.responseData = body;
				me.req = null;
				if(s2 != null && s2 >= 200 && s2 < 400) {
					me.onData(body);
				} else {
					me.onError("Http Error #" + s2);
				}
			});
		};
		this.req = secure ? js_node_Https.request(opts,httpResponse) : js_node_Http.request(opts,httpResponse);
		if(post) {
			this.req.write(uri);
		}
		this.req.end();
	}
	,onData: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,__class__: haxe_Http
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	__class__: haxe_ds_IntMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.prototype = {
	__class__: haxe_io_Path
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Fs = require("fs");
var js_node_Http = require("http");
var js_node_Https = require("https");
var js_node_Url = require("url");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_net_Socket = require("net").Socket;
var js_node_tls_SecureContext = function() { };
js_node_tls_SecureContext.__name__ = true;
var jstack_Tools = function() { };
jstack_Tools.__name__ = true;
var jstack_js_JStack = function() {
	this.ready = false;
	if(jstack_js_JStack.isNode()) {
		process.on("uncaughtException", jstack_js_JStack._uncaughtExceptionHandler);
	}
	this.inject();
};
jstack_js_JStack.__name__ = true;
jstack_js_JStack.onReady = function(callback) {
	jstack_js_JStack.onReadyCallback = callback;
	if(jstack_js_JStack.instance.ready) {
		callback();
	}
};
jstack_js_JStack.uncaughtExceptionHandler = function(e) {
	var stack = haxe_CallStack.getStack(e).map(jstack_js_JStack.improveStackItem);
	var error = e.message + haxe_CallStack.toString(stack) + "\n";
	return error;
};
jstack_js_JStack._uncaughtExceptionHandler = function(e) {
	var error = jstack_js_JStack.uncaughtExceptionHandler(e);
	if(error != null && error.length > 0) {
		console.log(error);
		if(jstack_js_JStack.isNode()) {
			process.exit(1);
		}
	}
};
jstack_js_JStack.isNode = function() {
	return typeof window == 'undefined';
};
jstack_js_JStack.improveStackItem = function(item) {
	if(item[1] == 1) {
		var line = item[2];
		if(jstack_js_JStack.stackFile.match(line)) {
			var file = jstack_js_JStack.stackFile.matched(1);
			if(file != jstack_js_JStack.currentFile()) {
				return item;
			}
			var line1 = Std.parseInt(jstack_js_JStack.stackFile.matched(2));
			var column = Std.parseInt(jstack_js_JStack.stackFile.matched(3));
			var pos = jstack_js_JStack.mapper.originalPositionFor(line1,column);
			return haxe_StackItem.FilePos(null,pos.source,pos.originalLine);
		} else {
			var line2 = item[2];
			if(jstack_js_JStack.stackFunctionFile.match(line2)) {
				var file1 = jstack_js_JStack.stackFunctionFile.matched(2);
				if(file1 != jstack_js_JStack.currentFile()) {
					return item;
				}
				var line3 = Std.parseInt(jstack_js_JStack.stackFunctionFile.matched(3));
				var column1 = Std.parseInt(jstack_js_JStack.stackFunctionFile.matched(4));
				var pos1 = jstack_js_JStack.mapper.originalPositionFor(line3,column1);
				if(pos1 == null) {
					return item;
				}
				var fn = jstack_js_JStack.stackFunctionFile.matched(1).split(".");
				var method = fn.pop();
				var cls = fn.join(".");
				var methodItem = cls != null && method != null ? haxe_StackItem.Method(cls,method) : null;
				return haxe_StackItem.FilePos(methodItem,pos1.source,pos1.originalLine);
			} else {
				return item;
			}
		}
	} else {
		return item;
	}
};
jstack_js_JStack.currentFile = function() {
	if(jstack_js_JStack.isNode()) {
		return __filename;
	}
	return null;
};
jstack_js_JStack.prototype = {
	inject: function() {
		var _gthis = this;
		this.loadSourceMap(function(sourceMapData) {
			jstack_js_JStack.mapper = new SourceMap(sourceMapData);
			haxe_CallStack.wrapCallSite = function(site) {
				var pos = jstack_js_JStack.mapper.originalPositionFor(site.getLineNumber(),site.getColumnNumber());
				return new jstack_js_StackPos(site,pos);
			};
			_gthis.ready = true;
			if(jstack_js_JStack.onReadyCallback != null) {
				jstack_js_JStack.onReadyCallback();
			}
		});
	}
	,loadSourceMap: function(callback) {
		if(!jstack_js_JStack.isNode()) {
			this.loadInBrowser(callback);
		} else {
			this.loadInNode(callback);
		}
	}
	,loadInBrowser: function(callback) {
		var currDir = this.getCurrentDirInBrowser();
		var file = currDir != null ? currDir + "/" + ("hog_test.js" + ".map") : "hog_test.js" + ".map";
		var http = new haxe_Http(file);
		http.onError = function(error) {
			haxe_Log.trace(error,{ fileName : "JStack.hx", lineNumber : 101, className : "jstack.js.JStack", methodName : "loadInBrowser"});
		};
		http.onData = function(sourceMap) {
			callback(sourceMap);
		};
		http.request();
	}
	,loadInNode: function(callback) {
		var dir = __dirname;
		var fs = require('fs');
		fs.readFile(dir + "/" + ("hog_test.js" + ".map"),function(error,sourceMap) {
			if(error != null) {
				haxe_Log.trace(error,{ fileName : "JStack.hx", lineNumber : 119, className : "jstack.js.JStack", methodName : "loadInNode"});
			} else {
				callback(sourceMap);
			}
		});
	}
	,getCurrentDirInBrowser: function() {
		var file = "hog_test.js";
		var scripts = window.document.getElementsByTagName("script");
		var fullPath = "./" + file;
		var _g1 = 0;
		var _g = scripts.length;
		while(_g1 < _g) {
			var i = _g1++;
			var src = scripts.item(i).attributes.getNamedItem("src");
			if(src != null && src.value.indexOf(file) >= 0) {
				fullPath = src.value;
			}
		}
		var path = new haxe_io_Path(fullPath);
		return path.dir;
	}
	,__class__: jstack_js_JStack
};
var jstack_js_StackPos = function(js,hx) {
	this.js = js;
	this.hx = hx;
};
jstack_js_StackPos.__name__ = true;
jstack_js_StackPos.prototype = {
	getFunctionName: function() {
		return this.js.getFunctionName();
	}
	,getFileName: function() {
		if(this.hx == null || this.hx.originalLine == null) {
			return this.js.getFileName();
		} else {
			return this.hx.source;
		}
	}
	,getLineNumber: function() {
		if(this.hx == null || this.hx.originalLine == null) {
			return this.js.getLineNumber();
		} else {
			return this.hx.originalLine;
		}
	}
	,__class__: jstack_js_StackPos
};
var sourcemap__$Mapping_Mapping_$Impl_$ = {};
sourcemap__$Mapping_Mapping_$Impl_$.__name__ = true;
sourcemap__$Mapping_Mapping_$Impl_$._new = function(data) {
	var this1 = data;
	return this1;
};
sourcemap__$Mapping_Mapping_$Impl_$.getSourcePos = function(this1,map,generatedLine) {
	var pos = { generatedLine : generatedLine, generatedColumn : this1[0]};
	if(this1.length > 1) {
		pos.originalLine = this1[2] + 1;
		pos.originalColumn = this1[3];
		pos.source = map.sourceRoot + map.sources[this1[1]];
		if(this1.length > 4) {
			pos.name = map.names[this1[4]];
		}
	}
	return pos;
};
sourcemap__$Mapping_Mapping_$Impl_$.hasSource = function(this1) {
	return this1.length > 1;
};
sourcemap__$Mapping_Mapping_$Impl_$.hasLine = function(this1) {
	return this1.length > 2;
};
sourcemap__$Mapping_Mapping_$Impl_$.hasColumn = function(this1) {
	return this1.length > 3;
};
sourcemap__$Mapping_Mapping_$Impl_$.hasName = function(this1) {
	return this1.length > 4;
};
sourcemap__$Mapping_Mapping_$Impl_$.offsetGeneratedColumn = function(this1,offset) {
	this1[0] += offset;
};
sourcemap__$Mapping_Mapping_$Impl_$.offsetSource = function(this1,offset) {
	this1[1] += offset;
};
sourcemap__$Mapping_Mapping_$Impl_$.offsetLine = function(this1,offset) {
	this1[2] += offset;
};
sourcemap__$Mapping_Mapping_$Impl_$.offsetColumn = function(this1,offset) {
	this1[3] += offset;
};
sourcemap__$Mapping_Mapping_$Impl_$.offsetName = function(this1,offset) {
	this1[4] += offset;
};
sourcemap__$Mapping_Mapping_$Impl_$.get_generatedColumn = function(this1) {
	return this1[0];
};
sourcemap__$Mapping_Mapping_$Impl_$.get_source = function(this1) {
	return this1[1];
};
sourcemap__$Mapping_Mapping_$Impl_$.get_line = function(this1) {
	return this1[2];
};
sourcemap__$Mapping_Mapping_$Impl_$.get_column = function(this1) {
	return this1[3];
};
sourcemap__$Mapping_Mapping_$Impl_$.get_name = function(this1) {
	return this1[4];
};
var sourcemap_Vlq = function() { };
sourcemap_Vlq.__name__ = true;
sourcemap_Vlq.base64Decode = function(charCode) {
	if(97 <= charCode) {
		return charCode - 97 + 26;
	}
	if(65 <= charCode) {
		return charCode - 65;
	}
	if(48 <= charCode) {
		return charCode - 48 + 52;
	}
	if(charCode == 43) {
		return 62;
	}
	return 63;
};
sourcemap_Vlq.decode = function(vlq) {
	var data = [0,0,0,0];
	var index = -1;
	var _g1 = 0;
	var _g = data.length;
	while(_g1 < _g) {
		var i = _g1++;
		var value = 0;
		var shift = 0;
		var digit;
		var masked;
		while(true) {
			var charCode = vlq.charCodeAt(++index);
			if(97 <= charCode) {
				digit = charCode - 97 + 26;
			} else if(65 <= charCode) {
				digit = charCode - 65;
			} else if(48 <= charCode) {
				digit = charCode - 48 + 52;
			} else if(charCode == 43) {
				digit = 62;
			} else {
				digit = 63;
			}
			masked = digit & 31;
			value += masked << shift;
			shift += 5;
			if(!(digit != masked)) {
				break;
			}
		}
		data[i] = (value & 1) == 1 ? -(value >> 1) : value >> 1;
	}
	var this1 = data;
	return this1;
};
var web3_Provider = function() { };
web3_Provider.__name__ = true;
web3_Provider.prototype = {
	__class__: web3_Provider
};
var web3__$Web3_TransactionHash_$Impl_$ = {};
web3__$Web3_TransactionHash_$Impl_$.__name__ = true;
web3__$Web3_TransactionHash_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
var web3__$Web3_Address_$Impl_$ = {};
web3__$Web3_Address_$Impl_$.__name__ = true;
web3__$Web3_Address_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
var web3__$Web3_Ether_$Impl_$ = {};
web3__$Web3_Ether_$Impl_$.__name__ = true;
web3__$Web3_Ether_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
web3__$Web3_Ether_$Impl_$.fromInt = function(value) {
	var this1 = new BigNumber(new BigNumber(value));
	var this2 = this1;
	return this2;
};
web3__$Web3_Ether_$Impl_$.toWei = function(this1) {
	web3_Web3Lib.setup();
	var this2 = new BigNumber(new BigNumber(web3_Web3Lib._web3["toWei"](this1,"ether")));
	return this2;
};
var web3__$Web3_Wei_$Impl_$ = {};
web3__$Web3_Wei_$Impl_$.__name__ = true;
web3__$Web3_Wei_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
web3__$Web3_Wei_$Impl_$.fromEther = function(ether) {
	web3_Web3Lib.setup();
	var this1 = new BigNumber(new BigNumber(web3_Web3Lib._web3["toWei"](ether,"ether")));
	var this2 = this1;
	return this2;
};
web3__$Web3_Wei_$Impl_$.fromInt = function(value) {
	var this1 = new BigNumber(new BigNumber(value));
	var this2 = this1;
	return this2;
};
var web3_Web3Lib = function() { };
web3_Web3Lib.__name__ = true;
web3_Web3Lib.createHttpProvider = function(url) {
	return new Web3.providers.HttpProvider(url);
};
web3_Web3Lib.createIpcProvider = function(url) {
	var client = new js_node_net_Socket();
	return new Web3.providers.IpcProvider(url,client);
};
web3_Web3Lib.setup = function() {
	if(typeof Web3 == 'undefined'){
				if(typeof global != 'undefined'){
					global.Web3 = require('web3');
				}else if(typeof window != 'undefined'){
					window.Web3 = require('web3');
				}
			}
	if(web3_Web3Lib._web3 == null) {
		web3_Web3Lib._web3 = new Web3();
		web3_Web3Lib._web3.reset();
	}
};
web3_Web3Lib.createInstance = function() {
	return new Web3();
};
web3_Web3Lib.toWei = function(value,base) {
	web3_Web3Lib.setup();
	return web3_Web3Lib._web3["toWei"](value,base);
};
web3_Web3Lib.sha3 = function(elems) {
	web3_Web3Lib.setup();
	var str = "";
	var _g = 0;
	while(_g < elems.length) {
		var elem = elems[_g];
		++_g;
		if(StringTools.startsWith(elem,"0x")) {
			str += HxOverrides.substr(elem,2,null);
		} else {
			str += web3_Web3Lib._web3.toHex(elem).substr(2);
		}
	}
	return web3_Web3Lib._web3.sha3(str,{ encoding : "hex"});
};
var web3_Web3Util = function() { };
web3_Web3Util.__name__ = true;
web3_Web3Util.waitForTransactionReceipt = function(_web3,txHash,mineCallback,timeout) {
	if(timeout == null) {
		timeout = 240;
	}
	var interval = 0;
	var attempts = 0;
	var make_attempt = function() {
		_web3.eth.getTransactionReceipt(txHash,function(e,receipt) {
			var make_attempt1 = e != null;
			if(receipt != null && receipt.blockHash != null && receipt.transactionHash == txHash) {
				clearInterval(interval);
				mineCallback(null,txHash,receipt);
			} else if(_$UInt_UInt_$Impl_$.gte(attempts,timeout)) {
				clearInterval(interval);
				mineCallback(null,txHash,null);
			} else {
				attempts += 1;
			}
		});
	};
	interval = setInterval(make_attempt,1000);
	make_attempt();
};
var web3_contract_Hog = function(_web3,address) {
	this._web3 = _web3;
	this._instance = web3_contract_Hog.factory["at"](address);
	this.address = address;
};
web3_contract_Hog.__name__ = true;
web3_contract_Hog.at = function(web31,address) {
	web3_contract_Hog.setup(web31);
	return new web3_contract_Hog(web31,address);
};
web3_contract_Hog.deploy = function(web31,option,callback,mineCallback) {
	var mining = false;
	web3_contract_Hog.setup(web31);
	web3_contract_Hog.factory["new"]({ from : option.from, gas : option.gas, value : option.value, gasPrice : option.gasPrice, data : web3_contract_Hog.code},function(err,deployedContract) {
		if(err != null) {
			if(mining) {
				mineCallback(err,null);
			} else {
				callback(err,null);
			}
		} else if(deployedContract.address != null) {
			mineCallback(null,new web3_contract_Hog(web31,deployedContract.address));
		} else if(mining) {
			mineCallback("no address",null);
		} else {
			callback(null,deployedContract);
		}
		mining = true;
	});
};
web3_contract_Hog.setup = function(_web3) {
	if(web3_contract_Hog.factory == null) {
		web3_contract_Hog.code = "0x" + "6060604052341561000c57fe5b5b611e2e8061001c6000396000f300606060405236156100a15763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166364b18bc781146100a35780636e116196146100e95780639939864e14610127578063a2f77bcc14610160578063a53b543814610211578063b16afc741461022c578063ce3f865f1461024e578063d040a75614610263578063d8fa19821461027d578063ea0bf5c714610295575bfe5b6100e760ff600435811690600160a060020a0360243581169163ffffffff60443581169260643590911691608435169061ffff60a435169060c4351660e4356102b6565b005b6100e760ff60043581169063ffffffff602435811691604435909116906064351661ffff60843516600160a060020a0360a4351660c43561066d565b005b6100e760ff600435811690600160a860020a0360243516906044351661ffff60643516600160a060020a036084351660a435610a18565b005b341561016857fe5b610173600435610e2c565b6040805161ffff909f168f5263ffffffff909d1660208f015260ff9b8c168e8e0152998b1660608e0152600098890b90980b60808d015295891660a08c0152600160a060020a0390941660c08b015291871660e08a0152861661010089015290941661012087015261014086019390935267ffffffffffffffff9283166101608601529091166101808401526101a083015251908190036101c00190f35b341561021957fe5b6100e760043560ff60243516610fa9565b005b341561023457fe5b61023c61113c565b60408051918252519081900360200190f35b341561025657fe5b6100e7600435611159565b005b341561026b57fe5b6100e7600435602435151561131f565b005b341561028557fe5b6100e76004356024356114fb565b005b341561029d57fe5b6100e760043560ff60243516604435606435611607565b005b3481900360006102c6338b611ae4565b60008181526020819052604090206001015490915060c060020a900460ff16158061030c5750600081815260208190526040902060019081015460c060020a900460ff16145b80156103215750637fffffff8763ffffffff16105b801561033a57508663ffffffff1664e8d4a51000028210155b8015610349575060058660ff16115b80156103585750607f8660ff16105b1561065a57604080516101e0810190915260006060820190815267ffffffffffffffff4216608083015263ffffffff808b1660a0840152891660c0830152819060e0820164e8d4a51000865b0463ffffffff1681526020018861ffff168152602001603260ff168152602001603260ff168152602001600160ff168152602001600060000b8152602001600060ff168152602001600060ff16815250815260200185600160a060020a031681526020016104138b6000611ae4565b815250600060008381526020019081526020016000206000820151816000016000820151816000019060001916905560208201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160010160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600101600c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160010160106101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160010160146101000a81548161ffff021916908361ffff16021790555060c08201518160010160166101000a81548160ff021916908360ff16021790555060e08201518160010160176101000a81548160ff021916908360ff1602179055506101008201518160010160186101000a81548160ff021916908360ff1602179055506101208201518160010160196101000a81548160ff021916908360000b60ff16021790555061014082015181600101601a6101000a81548160ff021916908360ff16021790555061016082015181600101601b6101000a81548160ff021916908360ff160217905550505060208201518160020160006101000a815481600160a060020a030219169083600160a060020a03160217905550604082015181600301559050508960ff1660020a6001600033600160a060020a0316600160a060020a03168152602001908152602001600020600082825417925050819055506106558484611af4565b610660565b60006000fd5b5b50505050505050505050565b34819003600061067d338a611ae4565b60008181526020819052604090206001015490915060c060020a900460ff1615806106c35750600081815260208190526040902060019081015460c060020a900460ff16145b80156106d85750637fffffff8763ffffffff16105b80156106f157508663ffffffff1664e8d4a51000028210155b8015610700575060058660ff16115b801561070f5750607f8660ff16105b1561065a57604080516101e0810190915260006060820190815267ffffffffffffffff4216608083015263ffffffff808b1660a0840152891660c0830152819060e0820164e8d4a51000865b0463ffffffff1681526020018861ffff1681526020018960ff1681526020018960ff168152602001600160ff168152602001600060000b8152602001600060ff168152602001600060ff16815250815260200185600160a060020a031681526020016000815250600060008381526020019081526020016000206000820151816000016000820151816000019060001916905560208201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160010160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600101600c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160010160106101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160010160146101000a81548161ffff021916908361ffff16021790555060c08201518160010160166101000a81548160ff021916908360ff16021790555060e08201518160010160176101000a81548160ff021916908360ff1602179055506101008201518160010160186101000a81548160ff021916908360ff1602179055506101208201518160010160196101000a81548160ff021916908360000b60ff16021790555061014082015181600101601a6101000a81548160ff021916908360ff16021790555061016082015181600101601b6101000a81548160ff021916908360ff160217905550505060208201518160020160006101000a815481600160a060020a030219169083600160a060020a03160217905550604082015181600301559050508860ff1660020a6001600033600160a060020a0316600160a060020a0316815260200190815260200160002060008282541792505081905550610a018484611af4565b610a0c565b60006000fd5b5b505050505050505050565b3481900360008080610a2a338b611ae4565b925088915033600160a060020a031682600160a060020a031614158015610a765750600160a860020a038916600090815260208190526040902060019081015460c060020a900460ff16145b8015610a9b575060008381526020819052604090206001015460c060020a900460ff16155b8015610afa5750600160a860020a0389166000908152602081905260409020600301541580610afa575033600160a060020a0316600060008b600160a860020a0316815260200190815260200160002060030154600160a060020a0316145b5b8015610b2e5750600160a860020a03891660009081526020819052604090206001015460ff89811660b060020a90920416145b8015610b625750600160a860020a03891660009081526020819052604090206001015461ffff88811660a060020a90920416145b8015610ba6575064e8d4a51000845b600160a860020a038b166000908152602081905260409020600101549190046801000000000000000090910463ffffffff1611155b8015610bee575064e8d4a51000845b600160a860020a038b166000908152602081905260409020600101549190046c0100000000000000000000000090910463ffffffff1610155b8015610c325750600160a860020a03891660009081526020819052604090206001015460a060020a810461ffff908116603c021667ffffffffffffffff9091164203105b1561065a5750600082815260208190526040808220600160a860020a038b16600382018190556001808301805478ff00000000000000000000000000000000000000000000000060c060020a60ff02199091161780825592865293909420909301805467ffffffffffffffff1667ffffffffffffffff1990941693909317909155600201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881617905554608060020a900463ffffffff1664e8d4a510000283811115610d2757604051600160a060020a0383169085830380156108fc02916000818181858888f193505050501515610d2757fe5b5b600160a860020a0389166000908152602081905260409020600181018054600390920185905567ffffffffffffffff199091164267ffffffffffffffff161760c060020a60ff021916780200000000000000000000000000000000000000000000000017905564e8d4a51000845b600160a860020a038b166000908152602081815260408083206001908101805473ffffffff000000000000000000000000000000001916608060020a97909604600290810263ffffffff16979097029590951790945533600160a060020a0316835292905220805460ff8d1690920a90911790556106558686611af4565b610660565b60006000fd5b5b50505050505050505050565b600081815260208190526040812060018101548291829182918291829182918291829182918291829182918f919060ff60c060020a90910481161415610e82576003015460008181526020819052604090209091505b600381015460008181526020819052604090206001015490995067ffffffffffffffff16925060a060020a895b04975080600001600101601a9054906101000a900460ff16965080600001600101601b9054906101000a900460ff169550806000016000015494508060000160010160149054906101000a900461ffff169e508060000160010160109054906101000a900463ffffffff169d508060000160010160169054906101000a900460ff169c508060000160010160179054906101000a900460ff169b508060000160010160199054906101000a900460000b9a508060000160010160189054906101000a900460ff1699508060000160010160009054906101000a900467ffffffffffffffff1693505b5091939597999b9d5091939597999b9d565b60008281526020819052604090206001810154600360c060020a90910460ff1610801590610fe65750600181015460ff60c060020a909104811614155b80156110085750600181015460029060c060020a900460ff165b0660ff166001145b801561103f575033600160a060020a031683600160a060020a0316148061103f5750600281015433600160a060020a039081169116145b5b801561106d5750600181015460a060020a810461ffff908116603c021667ffffffffffffffff9091164203105b1561065a576001810154600060b060020a90910460ff16118015611092575060ff8216155b806110ae5750600181015460ff60b060020a9091048116908316115b156110b95760006000fd5b6001818101805460c060020a60ff02197aff00000000000000000000000000000000000000000000000000001990911660d060020a60ff878116919091029190911791821660c060020a92839004821690940116029190911767ffffffffffffffff19164267ffffffffffffffff16179055611136565b60006000fd5b5b505050565b600160a060020a0333166000908152600160205260409020545b90565b6000818152602081905260409020600181015460a060020a810461ffff908116603c021667ffffffffffffffff9091164203111561065a576001810154600460c060020a90910460ff16108015906111c75750600181015460029060c060020a900460ff165b0660ff166000145b806111df575060018181015460c060020a900460ff16145b806111f85750600181015460c060020a900460ff166002145b8015611215575033600160a060020a031682600160a060020a0316145b8061123d575060008281526020819052604090206002015433600160a060020a039081169116145b156112515761124c8283611b30565b61130e565b6001810154600360c060020a90910460ff16108015906112805750600181015460ff60c060020a909104811614155b80156112a25750600181015460029060c060020a900460ff165b0660ff166001145b80156112c3575033600160a060020a03168160030154600160a060020a0316145b806112f05750600381015460009081526020819052604090206002015433600160a060020a039081169116145b1561065a5761124c828260030154611b30565b61130e565b60006000fd5b5b61131a565b60006000fd5b5b5050565b6000828152602081905260409020600181015460a060020a810461ffff908116603c021667ffffffffffffffff909116420311156113655761136083611159565b611136565b811561065a576001810154600360c060020a90910460ff161080159061139a5750600181015460ff60c060020a909104811614155b80156113bc5750600181015460029060c060020a900460ff165b0660ff166001145b806113d4575060018181015460c060020a900460ff16145b80156113f1575033600160a060020a031683600160a060020a0316145b80611419575060008381526020819052604090206002015433600160a060020a039081169116145b156114315761142c838260030154611b30565b611360565b6001810154600460c060020a90910460ff16108015906114675750600181015460029060c060020a900460ff165b0660ff166000145b806114805750600181015460c060020a900460ff166002145b80156114a1575033600160a060020a03168160030154600160a060020a0316145b806114ce5750600381015460009081526020819052604090206002015433600160a060020a039081169116145b1561065a5761142c8384611b30565b611360565b60006000fd5b5b611136565b60006000fd5b5b5b505050565b6000828152602081905260409020600181015460c060020a900460ff166002148015611568575033600160a060020a03168160030154600160a060020a031614806115685750600381015460009081526020819052604090206002015433600160a060020a039081169116145b5b80156115965750600181015460a060020a810461ffff908116603c021667ffffffffffffffff9091164203105b1561065a576001818101805460c060020a60ff0219167803000000000000000000000000000000000000000000000000179055600084815260208190526040902083815501805467ffffffffffffffff19164267ffffffffffffffff16179055611136565b60006000fd5b5b505050565b60008481526020819052604081206001810154909190600460c060020a90910460ff161080159061164e5750600182015460029060c060020a900460ff165b0660ff166000145b801561169b575033600160a060020a03168260030154600160a060020a0316148061169b5750600382015460009081526020819052604090206002015433600160a060020a039081169116145b5b80156116c95750600182015460a060020a810461ffff908116603c021667ffffffffffffffff9091164203105b801561174757506000868152602081815260409182902054600385015483518881526c01000000000000000000000000600160a060020a0390921691909102928101929092527f010000000000000000000000000000000000000000000000000000000000000060ff89160260348301529151908190036035019020145b1561065a576001828101805460c060020a60ff0219811660c060020a9182900460ff90811690940184169091021767ffffffffffffffff19164267ffffffffffffffff161790819055600060b860020a9091049091161180156117ab575060ff8516155b806117c75750600182015460ff60b860020a9091048116908616115b156117d25760006000fd5b5060018101805483835577ff00000000000000000000000000000000000000000000001976ff00000000000000000000000000000000000000000000197bff000000000000000000000000000000000000000000000000000000199092167b0100000000000000000000000000000000000000000000000000000060ff8981169182029290921793841660d060020a8504831660b060020a95869004841681900384169095021792831660b860020a9384900483168a900390921690920217909255908110156118cf5760018201805460c860020a60ff0219811660ff60c860020a92839004600090810b60001901900b16909102179055611910565b8460ff168160ff161115611910576001808301805460c860020a808204600090810b90940190930b60ff1690920260c860020a60ff02199092169190911790555b5b600182015460b060020a900460ff1615801561193c57506001820154600060b860020a90910460ff16115b1561197e5760018201805460ff60b860020a8204811660c860020a808404600090810b9290920390910b9091160260c860020a60ff02199091161790556119e5565b6001820154600060b060020a90910460ff161180156119a95750600182015460b860020a900460ff16155b156119e55760018201805460c860020a808204600090810b60ff60b060020a850481169190910190910b160260c860020a60ff02199091161790555b5b600182015460011960c860020a909104600090810b900b1215611a1657611a11868360030154611b30565b611acb565b6001820154600260c860020a909104600090810b900b1315611a4157611a118687611b30565b611acb565b600182015460b860020a900460ff16158015611a695750600182015460b060020a900460ff16155b15611acb576001820154600060c860020a909104810b810b1215611a9a57611a11868360030154611b30565b611acb565b6001820154600060c860020a909104810b810b1315611ac257611a118687611b30565b611acb565b611acb86611b90565b5b5b5b5b5b611adb565b60006000fd5b5b505050505050565b60a060020a810282015b92915050565b600081111561131a57604051600160a060020a0383169082156108fc029083906000818181858888f19350505050151561131a57fe5b5b5b5050565b600082815260208190526040808220600181015491519092600160a060020a0385169264e8d4a5100063ffffffff608060020a909204919091160280156108fc02929091818181858888f193505050505061113683611c44565b5b505050565b60008181526020819052604081206003810154600182015491928492600290608060020a900463ffffffff1664e8d4a51000025b6040519190049150600160a060020a0383169082156108fc029083906000818181858888f1505050506001850154604051600160a060020a03861692506108fc608060020a90920463ffffffff1664e8d4a510000284900380159290920291906000818181858888f1935050505050611c3c85611c44565b5b5050505050565b6000818152602081905260408082206001808201805460c060020a60ff021990811682556003840180548752858720840180549092169091558154815487528587208401805476ff00000000000000000000000000000000000000000000191660ff60b060020a9384900481169093021790558254825488528688208501805477ff0000000000000000000000000000000000000000000000191660b860020a928390048416909202919091179055825482548852868820850180547aff0000000000000000000000000000000000000000000000000000191660d060020a92839004841690920291909117905591549054865293852090910180547bff00000000000000000000000000000000000000000000000000000019167b0100000000000000000000000000000000000000000000000000000094859004909216909302179091559060a060020a835b600160a060020a038516600090815260016020526040902080549290910460ff811660020a9092179055600383015490915060a060020a905b6003840154600160a060020a0316600090815260016020526040902080549290910460ff811660020a19909216905590505b5050505600a165627a7a72305820bb02489885d838489eda8eaa61da0d5d204f5f5e564e588326c669e5e9e20eda0029";
		web3_contract_Hog.factory = _web3.eth.contract(JSON.parse("[{\"constant\":false,\"inputs\":[{\"name\":\"slotIndex\",\"type\":\"uint8\"},{\"name\":\"otherPlayer\",\"type\":\"address\"},{\"name\":\"minSzabo\",\"type\":\"uint32\"},{\"name\":\"maxSzabo\",\"type\":\"uint32\"},{\"name\":\"numUnits\",\"type\":\"uint8\"},{\"name\":\"periodInMinutes\",\"type\":\"uint16\"},{\"name\":\"shadow\",\"type\":\"address\"},{\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"create_game_invite\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"slotIndex\",\"type\":\"uint8\"},{\"name\":\"minSzabo\",\"type\":\"uint32\"},{\"name\":\"maxSzabo\",\"type\":\"uint32\"},{\"name\":\"numUnits\",\"type\":\"uint8\"},{\"name\":\"periodInMinutes\",\"type\":\"uint16\"},{\"name\":\"shadow\",\"type\":\"address\"},{\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"create_game\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"slotIndex\",\"type\":\"uint8\"},{\"name\":\"otherSlot\",\"type\":\"uint168\"},{\"name\":\"numUnits\",\"type\":\"uint8\"},{\"name\":\"periodInMinutes\",\"type\":\"uint16\"},{\"name\":\"shadow\",\"type\":\"address\"},{\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"start_game\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"name\":\"period\",\"type\":\"uint16\"},{\"name\":\"szaboPaid\",\"type\":\"uint32\"},{\"name\":\"p1NumUnits\",\"type\":\"uint8\"},{\"name\":\"p2NumUnits\",\"type\":\"uint8\"},{\"name\":\"position\",\"type\":\"int8\"},{\"name\":\"turn\",\"type\":\"uint8\"},{\"name\":\"otherPlayer\",\"type\":\"address\"},{\"name\":\"otherSlotIndex\",\"type\":\"uint8\"},{\"name\":\"move1\",\"type\":\"uint8\"},{\"name\":\"move2\",\"type\":\"uint8\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"lastTime\",\"type\":\"uint64\"},{\"name\":\"creationTime\",\"type\":\"uint64\"},{\"name\":\"gameSlot\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"slot\",\"type\":\"uint256\"},{\"name\":\"move\",\"type\":\"uint8\"}],\"name\":\"move_reveal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOccupancy\",\"outputs\":[{\"name\":\"occup\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"slot\",\"type\":\"uint256\"},{\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"quit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"slot\",\"type\":\"uint256\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"move\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"slot\",\"type\":\"uint256\"},{\"name\":\"move\",\"type\":\"uint8\"},{\"name\":\"secret\",\"type\":\"bytes32\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"reveal_move\",\"outputs\":[],\"payable\":false,\"type\":\"function\"}]"));
	}
};
web3_contract_Hog.prototype = {
	sendRawData: function(data,option,callback,mineCallback,timeout) {
		var _gthis = this;
		var rawTx = { nonce : "0x" + StringTools.hex(option.nonce), gasPrice : option.gasPrice == null ? "0x1" : "0x" + option.gasPrice.toString(16), gasLimit : "0x" + StringTools.hex(option.gas), to : this.address, value : option.value == null ? "0x0" : "0x" + option.value.toString(16), data : data};
		var tx = new ethereumjs_Tx(rawTx);
		tx.sign(option.privateKey);
		var serializedTx = tx.serialize();
		this._web3.eth.sendRawTransaction(serializedTx.toString("hex"),function(err,txHash) {
			callback(err,txHash);
			if(err == null && mineCallback != null) {
				if(timeout != null) {
					web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback,timeout);
				} else {
					web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback);
				}
			}
		});
	}
	,commit_to_create_game_invite: function(params,option,callback,mineCallback,timeout) {
		var _gthis = this;
		if(option.privateKey != null) {
			var data = this.get_data_for_create_game_invite(params);
			if(option.nonce != null) {
				this.sendRawData(data,{ privateKey : option.privateKey, nonce : option.nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
			} else {
				this._web3.eth.getTransactionCount(option.from,function(err,nonce) {
					if(err != null) {
						callback(err,null);
					} else {
						_gthis.sendRawData(data,{ privateKey : option.privateKey, nonce : nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
					}
				});
			}
		} else {
			this._instance.create_game_invite.sendTransaction(params.slotIndex,params.otherPlayer,params.minSzabo,params.maxSzabo,params.numUnits,params.periodInMinutes,params.shadow,params.allowance,option,function(err1,txHash) {
				callback(err1,txHash);
				if(err1 == null && mineCallback != null) {
					if(timeout != null) {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback,timeout);
					} else {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback);
					}
				}
			});
		}
	}
	,commit_to_create_game: function(params,option,callback,mineCallback,timeout) {
		var _gthis = this;
		if(option.privateKey != null) {
			var data = this.get_data_for_create_game(params);
			if(option.nonce != null) {
				this.sendRawData(data,{ privateKey : option.privateKey, nonce : option.nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
			} else {
				this._web3.eth.getTransactionCount(option.from,function(err,nonce) {
					if(err != null) {
						callback(err,null);
					} else {
						_gthis.sendRawData(data,{ privateKey : option.privateKey, nonce : nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
					}
				});
			}
		} else {
			this._instance.create_game.sendTransaction(params.slotIndex,params.minSzabo,params.maxSzabo,params.numUnits,params.periodInMinutes,params.shadow,params.allowance,option,function(err1,txHash) {
				callback(err1,txHash);
				if(err1 == null && mineCallback != null) {
					if(timeout != null) {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback,timeout);
					} else {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback);
					}
				}
			});
		}
	}
	,commit_to_start_game: function(params,option,callback,mineCallback,timeout) {
		var _gthis = this;
		if(option.privateKey != null) {
			var data = this.get_data_for_start_game(params);
			if(option.nonce != null) {
				this.sendRawData(data,{ privateKey : option.privateKey, nonce : option.nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
			} else {
				this._web3.eth.getTransactionCount(option.from,function(err,nonce) {
					if(err != null) {
						callback(err,null);
					} else {
						_gthis.sendRawData(data,{ privateKey : option.privateKey, nonce : nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
					}
				});
			}
		} else {
			this._instance.start_game.sendTransaction(params.slotIndex,params.otherSlot,params.numUnits,params.periodInMinutes,params.shadow,params.allowance,option,function(err1,txHash) {
				callback(err1,txHash);
				if(err1 == null && mineCallback != null) {
					if(timeout != null) {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback,timeout);
					} else {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback);
					}
				}
			});
		}
	}
	,commit_to_move_reveal: function(params,option,callback,mineCallback,timeout) {
		var _gthis = this;
		if(option.privateKey != null) {
			var data = this.get_data_for_move_reveal(params);
			if(option.nonce != null) {
				this.sendRawData(data,{ privateKey : option.privateKey, nonce : option.nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
			} else {
				this._web3.eth.getTransactionCount(option.from,function(err,nonce) {
					if(err != null) {
						callback(err,null);
					} else {
						_gthis.sendRawData(data,{ privateKey : option.privateKey, nonce : nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
					}
				});
			}
		} else {
			this._instance.move_reveal.sendTransaction(params.slot,params.move,option,function(err1,txHash) {
				callback(err1,txHash);
				if(err1 == null && mineCallback != null) {
					if(timeout != null) {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback,timeout);
					} else {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback);
					}
				}
			});
		}
	}
	,commit_to_collect: function(params,option,callback,mineCallback,timeout) {
		var _gthis = this;
		if(option.privateKey != null) {
			var data = this.get_data_for_collect(params);
			if(option.nonce != null) {
				this.sendRawData(data,{ privateKey : option.privateKey, nonce : option.nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
			} else {
				this._web3.eth.getTransactionCount(option.from,function(err,nonce) {
					if(err != null) {
						callback(err,null);
					} else {
						_gthis.sendRawData(data,{ privateKey : option.privateKey, nonce : nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
					}
				});
			}
		} else {
			this._instance.collect.sendTransaction(params.slot,option,function(err1,txHash) {
				callback(err1,txHash);
				if(err1 == null && mineCallback != null) {
					if(timeout != null) {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback,timeout);
					} else {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback);
					}
				}
			});
		}
	}
	,commit_to_quit: function(params,option,callback,mineCallback,timeout) {
		var _gthis = this;
		if(option.privateKey != null) {
			var data = this.get_data_for_quit(params);
			if(option.nonce != null) {
				this.sendRawData(data,{ privateKey : option.privateKey, nonce : option.nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
			} else {
				this._web3.eth.getTransactionCount(option.from,function(err,nonce) {
					if(err != null) {
						callback(err,null);
					} else {
						_gthis.sendRawData(data,{ privateKey : option.privateKey, nonce : nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
					}
				});
			}
		} else {
			this._instance.quit.sendTransaction(params.slot,params.force,option,function(err1,txHash) {
				callback(err1,txHash);
				if(err1 == null && mineCallback != null) {
					if(timeout != null) {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback,timeout);
					} else {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback);
					}
				}
			});
		}
	}
	,commit_to_move: function(params,option,callback,mineCallback,timeout) {
		var _gthis = this;
		if(option.privateKey != null) {
			var data = this.get_data_for_move(params);
			if(option.nonce != null) {
				this.sendRawData(data,{ privateKey : option.privateKey, nonce : option.nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
			} else {
				this._web3.eth.getTransactionCount(option.from,function(err,nonce) {
					if(err != null) {
						callback(err,null);
					} else {
						_gthis.sendRawData(data,{ privateKey : option.privateKey, nonce : nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
					}
				});
			}
		} else {
			this._instance.move.sendTransaction(params.slot,params.hash,option,function(err1,txHash) {
				callback(err1,txHash);
				if(err1 == null && mineCallback != null) {
					if(timeout != null) {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback,timeout);
					} else {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback);
					}
				}
			});
		}
	}
	,commit_to_reveal_move: function(params,option,callback,mineCallback,timeout) {
		var _gthis = this;
		if(option.privateKey != null) {
			var data = this.get_data_for_reveal_move(params);
			if(option.nonce != null) {
				this.sendRawData(data,{ privateKey : option.privateKey, nonce : option.nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
			} else {
				this._web3.eth.getTransactionCount(option.from,function(err,nonce) {
					if(err != null) {
						callback(err,null);
					} else {
						_gthis.sendRawData(data,{ privateKey : option.privateKey, nonce : nonce, gasPrice : option.gasPrice, gas : option.gas, value : option.value},callback,mineCallback,timeout);
					}
				});
			}
		} else {
			this._instance.reveal_move.sendTransaction(params.slot,params.move,params.secret,params.hash,option,function(err1,txHash) {
				callback(err1,txHash);
				if(err1 == null && mineCallback != null) {
					if(timeout != null) {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback,timeout);
					} else {
						web3_Web3Util.waitForTransactionReceipt(_gthis._web3,txHash,mineCallback);
					}
				}
			});
		}
	}
	,get_data_for_create_game_invite: function(params) {
		return this._instance.create_game_invite.getData(params.slotIndex,params.otherPlayer,params.minSzabo,params.maxSzabo,params.numUnits,params.periodInMinutes,params.shadow,params.allowance);
	}
	,get_data_for_create_game: function(params) {
		return this._instance.create_game.getData(params.slotIndex,params.minSzabo,params.maxSzabo,params.numUnits,params.periodInMinutes,params.shadow,params.allowance);
	}
	,get_data_for_start_game: function(params) {
		return this._instance.start_game.getData(params.slotIndex,params.otherSlot,params.numUnits,params.periodInMinutes,params.shadow,params.allowance);
	}
	,get_data_for_move_reveal: function(params) {
		return this._instance.move_reveal.getData(params.slot,params.move);
	}
	,get_data_for_collect: function(params) {
		return this._instance.collect.getData(params.slot);
	}
	,get_data_for_quit: function(params) {
		return this._instance.quit.getData(params.slot,params.force);
	}
	,get_data_for_move: function(params) {
		return this._instance.move.getData(params.slot,params.hash);
	}
	,get_data_for_reveal_move: function(params) {
		return this._instance.reveal_move.getData(params.slot,params.move,params.secret,params.hash);
	}
	,probe_create_game_invite: function(params,option,callback) {
		this._instance.create_game_invite.call(params.slotIndex,params.otherPlayer,params.minSzabo,params.maxSzabo,params.numUnits,params.periodInMinutes,params.shadow,params.allowance,option,function(err,result) {
			if(err != null) {
				callback(err);
			} else {
				callback(null);
			}
		});
	}
	,probe_create_game: function(params,option,callback) {
		this._instance.create_game.call(params.slotIndex,params.minSzabo,params.maxSzabo,params.numUnits,params.periodInMinutes,params.shadow,params.allowance,option,function(err,result) {
			if(err != null) {
				callback(err);
			} else {
				callback(null);
			}
		});
	}
	,probe_start_game: function(params,option,callback) {
		this._instance.start_game.call(params.slotIndex,params.otherSlot,params.numUnits,params.periodInMinutes,params.shadow,params.allowance,option,function(err,result) {
			if(err != null) {
				callback(err);
			} else {
				callback(null);
			}
		});
	}
	,probe_getGame: function(params,option,callback) {
		this._instance.getGame.call(params.slot,option,function(err,result) {
			if(err != null) {
				callback(err,null);
			} else {
				var tmp = result[1].toNumber();
				var tmp1 = result[2].toNumber();
				var tmp2 = result[3].toNumber();
				var tmp3 = result[4].toNumber();
				var tmp4 = result[5].toNumber();
				var tmp5 = result[7].toNumber();
				var tmp6 = result[8].toNumber();
				callback(null,{ period : result[0], szaboPaid : tmp, p1NumUnits : tmp1, p2NumUnits : tmp2, position : tmp3, turn : tmp4, otherPlayer : result[6], otherSlotIndex : tmp5, move1 : tmp6, move2 : result[9].toNumber(), hash : result[10], lastTime : result[11], creationTime : result[12], gameSlot : result[13]});
			}
		});
	}
	,probe_move_reveal: function(params,option,callback) {
		this._instance.move_reveal.call(params.slot,params.move,option,function(err,result) {
			if(err != null) {
				callback(err);
			} else {
				callback(null);
			}
		});
	}
	,probe_getOccupancy: function(option,callback) {
		this._instance.getOccupancy.call(option,function(err,result) {
			if(err != null) {
				callback(err,null);
			} else {
				callback(null,{ occup : result});
			}
		});
	}
	,probe_collect: function(params,option,callback) {
		this._instance.collect.call(params.slot,option,function(err,result) {
			if(err != null) {
				callback(err);
			} else {
				callback(null);
			}
		});
	}
	,probe_quit: function(params,option,callback) {
		this._instance.quit.call(params.slot,params.force,option,function(err,result) {
			if(err != null) {
				callback(err);
			} else {
				callback(null);
			}
		});
	}
	,probe_move: function(params,option,callback) {
		this._instance.move.call(params.slot,params.hash,option,function(err,result) {
			if(err != null) {
				callback(err);
			} else {
				callback(null);
			}
		});
	}
	,probe_reveal_move: function(params,option,callback) {
		this._instance.reveal_move.call(params.slot,params.move,params.secret,params.hash,option,function(err,result) {
			if(err != null) {
				callback(err);
			} else {
				callback(null);
			}
		});
	}
	,estimateGas_for_create_game_invite: function(params,option,callback) {
		this._instance.create_game_invite.estimateGas(params.slotIndex,params.otherPlayer,params.minSzabo,params.maxSzabo,params.numUnits,params.periodInMinutes,params.shadow,params.allowance,option,function(err,gas) {
			if(err != null) {
				callback(err,0);
			} else {
				callback(null,gas);
			}
		});
	}
	,estimateGas_for_create_game: function(params,option,callback) {
		this._instance.create_game.estimateGas(params.slotIndex,params.minSzabo,params.maxSzabo,params.numUnits,params.periodInMinutes,params.shadow,params.allowance,option,function(err,gas) {
			if(err != null) {
				callback(err,0);
			} else {
				callback(null,gas);
			}
		});
	}
	,estimateGas_for_start_game: function(params,option,callback) {
		this._instance.start_game.estimateGas(params.slotIndex,params.otherSlot,params.numUnits,params.periodInMinutes,params.shadow,params.allowance,option,function(err,gas) {
			if(err != null) {
				callback(err,0);
			} else {
				callback(null,gas);
			}
		});
	}
	,estimateGas_for_getGame: function(params,option,callback) {
		this._instance.getGame.estimateGas(params.slot,option,function(err,gas) {
			if(err != null) {
				callback(err,0);
			} else {
				callback(null,gas);
			}
		});
	}
	,estimateGas_for_move_reveal: function(params,option,callback) {
		this._instance.move_reveal.estimateGas(params.slot,params.move,option,function(err,gas) {
			if(err != null) {
				callback(err,0);
			} else {
				callback(null,gas);
			}
		});
	}
	,estimateGas_for_getOccupancy: function(option,callback) {
		this._instance.getOccupancy.estimateGas(option,function(err,gas) {
			if(err != null) {
				callback(err,0);
			} else {
				callback(null,gas);
			}
		});
	}
	,estimateGas_for_collect: function(params,option,callback) {
		this._instance.collect.estimateGas(params.slot,option,function(err,gas) {
			if(err != null) {
				callback(err,0);
			} else {
				callback(null,gas);
			}
		});
	}
	,estimateGas_for_quit: function(params,option,callback) {
		this._instance.quit.estimateGas(params.slot,params.force,option,function(err,gas) {
			if(err != null) {
				callback(err,0);
			} else {
				callback(null,gas);
			}
		});
	}
	,estimateGas_for_move: function(params,option,callback) {
		this._instance.move.estimateGas(params.slot,params.hash,option,function(err,gas) {
			if(err != null) {
				callback(err,0);
			} else {
				callback(null,gas);
			}
		});
	}
	,estimateGas_for_reveal_move: function(params,option,callback) {
		this._instance.reveal_move.estimateGas(params.slot,params.move,params.secret,params.hash,option,function(err,gas) {
			if(err != null) {
				callback(err,0);
			} else {
				callback(null,gas);
			}
		});
	}
	,__class__: web3_contract_Hog
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
haxe_Cson.BACKSPACE = "\x08";
haxe_Cson.FORM_FEED = "\x0C";
js_Boot.__toStr = ({ }).toString;
jstack_js_JStack.instance = new jstack_js_JStack();
jstack_js_JStack.stackFile = new EReg("^at (.+?js):([0-9]+):([0-9]+)$","");
jstack_js_JStack.stackFunctionFile = new EReg("^at (.+?) \\((.+?js):([0-9]+):([0-9]+)\\)$","");
sourcemap__$Mapping_Mapping_$Impl_$.GENERATED_COLUMN = 0;
sourcemap__$Mapping_Mapping_$Impl_$.SOURCE = 1;
sourcemap__$Mapping_Mapping_$Impl_$.LINE = 2;
sourcemap__$Mapping_Mapping_$Impl_$.COLUMN = 3;
sourcemap__$Mapping_Mapping_$Impl_$.NAME = 4;
sourcemap_Vlq.SHIFT = 5;
sourcemap_Vlq.MASK = 31;
HogTest.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=hog_test.js.map